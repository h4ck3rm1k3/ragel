namespace host
	lex 
		rl NL / '\n' /

		rl s_literal
			/ "'" ([^'\\] | NL | '\\' (any | NL))* "'" /

		rl d_literal
			/ '"' ([^"\\] | NL | '\\' (any | NL))* '"' /

		rl c_comment 
			/ '/*' ( any | NL )* :>> '*/' /

		rl cpp_comment
			/ '//' [^\n]* NL /

		token ident
			/( alpha | '_' ) ( alpha | digit | '_' )*/

		token uint
			/ digit+ /

		token hex_number
			/ '0x' [0-9a-fA-F]+ /

		token comment
			/ c_comment | cpp_comment /

		token string
			/ s_literal | d_literal /

		token whitespace
			/ ( [ \t] | NL )+ /

		literal `={ `}= `${ `}$

		token c_any / any /
	end

	def tok
		[ident]
	|	[uint]
	|	[hex_number]
	|	[comment]
	|	[string]
	|	[whitespace]
	|	[`${ stmt* `}$]
	|	[`={ expr `}=]
	|	[c_any]

	def out
		[tok*]
end

lex 
	rl NL / '\n' /

	rl s_literal
		/ "'" ([^'\\] | NL | '\\' (any | NL))* "'" /

	rl d_literal
		/ '"' ([^"\\] | NL | '\\' (any | NL))* '"' /

	rl c_comment 
		/ '/*' ( any | NL )* :>> '*/' /

	rl cpp_comment
		/ '//' [^\n]* NL /

	literal `array `value `TRUE `FALSE
			`while `switch `case
			`if `else `offset `index
			`goto `deref

	literal `uint `const
			`s8 `s16 `s32 `s64
			`s128 `nil `export
			`fallthrough `u

	token ident
		/( alpha | '_' ) ( alpha | digit | '_' )*/

	token uint
		/ digit+ /

	token hex_number
		/ '0x' [0-9a-fA-F]+ /

	ignore
		/ c_comment | cpp_comment /

	token string
		/ s_literal | d_literal /

	ignore / ( [ \t] | NL )+ /

	token pragma /'#' any* :> '\n' /

	literal `$ `{ `} `= `[ `]
			`- `, `; `( `) `:
			`? `* `+ `> `< `&
			`~ `! `!= `== `<< `>>
			`+= `&& `|| `<= `>= `->
			`++ `--
end

def embedded_host
	[`$ string uint `{ host::tok* host::`}$]
|	[`= string uint `{ host::tok* host::`}$]

def type
	[ident]
|	[ident ident]
|	[`uint]
|	[`s8]
|	[`s16]
|	[`s32]
|	[`s64]
|	[`s128]

def expr_factor
	[embedded_host]
|	[ident]
|	[ident `[ expr `]]
|	[`offset `( ident `, expr `)]
|	[`deref `( ident `, expr `)]
|	[number]
|	[`TRUE]
|	[`FALSE]
|	[`nil]
|	[hex_number]
|	[string]
|	[`( expr `)]

def expr_ptr
	[expr_ptr `-> expr_factor]
|	[`* expr_ptr]
|	[`++ expr_ptr]
|	[`-- expr_ptr]
|	[expr_ptr `++]
|	[expr_ptr `--]
|	[`( type `) expr_ptr]
|	[expr_factor]

def expr_factor_op
	[`! expr_factor_op]
|	[`~ expr_factor_op]
|	[expr_ptr]

def expr_bitwise
	[expr_bitwise `& expr_factor_op]
|	[expr_factor_op]

def expr_mult
	[expr_mult `* expr_bitwise]
|	[expr_bitwise]

def add_op
	[`+] | [`-]

def expr_add
	[expr_add add_op expr_mult]
|	[expr_mult]

def shift_op
	[`<<] | [`>>]

def expr_shift
	[expr_shift shift_op expr_add]
|	[expr_add]

def test_op
	[`<] | [`>] | [`<=] | [`>=] |
	[`==] | [`!=] | [`&&] | [`||]

def expr_test
	[expr_test test_op expr_shift]
|	[expr_shift]

def expr_cond
	[expr_test]

def assign_op
	[`=] | [`+=]

def expr_assign
	[expr_assign assign_op expr_cond]
|	[expr_cond]

def expr
	[expr_assign]

def sint
	[uint]
|	[`- uint]

def number
	[`u `( uint `)]
|	[sint]

def comma_num
	[`, number]

def num_list
	[number comma_num*]
|	[]

def array
	[`array type ident `( number `, number  `) `= `{ num_list `} `;]

def value_pass
	[type ident `= number `;]

def value
	[`value value_pass]

def while_stmt
	[`while `( expr `) stmt]

def else_if_clause
	[`else `if `( expr `) stmt]

def else_clause
	[`else stmt]

def if_stmt [
	`if `( expr `) stmt
	else_if_clause* else_clause?
]

def switch_stmt
	[`switch `( expr `) `{ stmt* `}]

def case_label
	[`case expr `:]

def goto_label
	[ident `:]

def opt_init
	[`= expr]
|	[]

def opt_ptr
	[`*]
|	[]

def opt_const
	[`const]
|	[]

def declaration
	[opt_const type opt_ptr ident opt_init `;]

def export_stmt
	[`export type ident number `;]

def index_stmt
	[`index type  ident `;]

def stmt
	[embedded_host]
|	[array]
|	[value]
|	[index_stmt]
|	[declaration]
|	[while_stmt]
|	[if_stmt]
|	[switch_stmt]
|	[case_label]
|	[goto_label]
|	[expr `;]
|	[pragma]
|	[export_stmt]
|	[`fallthrough `;]
|	[`goto ident `;]
|	[`{ stmt* `}]

def start
	[stmt*]

include 'rlhc-c.lm'
include 'rlhc-d.lm'
include 'rlhc-cs.lm'
include 'rlhc-go.lm'

InputFile: str = argv.pop()
OutputFile: str = argv.pop()
Lang: str = argv.pop()

Input: stream = open( InputFile "r" )

parse Start: start[ Input ]

if ( !Start ) {
	print( error '\n' )
	exit(1)
}

global Output: stream = open( OutputFile "w" )
if ( Lang == 'c' )
	c_stmt_list( Start._repeat_stmt )
elsif ( Lang == 'd' )
	d_stmt_list( Start._repeat_stmt )
elsif ( Lang == 'csharp' )
	cs_stmt_list( Start._repeat_stmt )
elsif ( Lang == 'go' )
	go_stmt_list( Start._repeat_stmt )
else {
	print( 'rlhc: unrecognized language: ' Lang '\n' )
}
