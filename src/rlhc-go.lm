void go_tok_list( TL: host::tok* )
{
	for Tok: host::tok in repeat(TL) {
		if match Tok [host::`${ StmtList: stmt* host::`}$]
			go_stmt_list( StmtList )
		elsif match Tok [host::`={ Expr: expr host::`}=]
			go_expr( Expr )
		else
			send Output [Tok]
	}
}

void go_expr_factor( ExprFactor: expr_factor )
{
	if match ExprFactor
		[`$ string uint `{ TL: host::tok* host::`}$]
	{
		go_tok_list( TL )
		send Output ["\n"]
	}
	elsif match ExprFactor
		[`= string uint `{ TL: host::tok* host::`}$]
	{
		go_tok_list( TL )
	}
	elsif match ExprFactor
		[O:`( TL: expr C: `)]
	{
		send Output [O]
		go_expr( TL )
		send Output [C]
	}
	elsif match ExprFactor
		[ident O: `[ TL: expr C: `]]
	{
		send Output [ExprFactor.ident O]
		go_expr( TL )
		send Output [C]
	}
	elsif match ExprFactor
		[`offset `( ident `, expr `)]
	{
		send Output ['int(']
		go_expr( ExprFactor.expr )
		send Output [')']
	}
	elsif match ExprFactor
		['deref' '(' ident ',' expr ')']
	{
		send Output [ ExprFactor.ident '[']
		go_expr( ExprFactor.expr )
		send Output [']']
	}
	elsif match ExprFactor
			[T: `TRUE]
	{
		T.data = 'true'
		send Output [T]
	}
	elsif match ExprFactor
			[F: `FALSE]
	{
		F.data = '0'
		send Output [F]
	}
	elsif match ExprFactor
			[N: `nil]
	{
		N.data = '0'
		send Output [N]
	}
	else {
		# Catches cases not specified
		send Output [ExprFactor]
	}
}

void go_expr_ptr( ExprPtr: expr_ptr )
{
	if match ExprPtr [expr_ptr Arrow: `-> expr_factor]
	{
		go_expr_ptr( ExprPtr._expr_ptr )
		send Output [Arrow]
		go_expr_factor( ExprPtr.expr_factor )
	}
	elsif match ExprPtr [Star: `* expr_ptr]
	{
		send Output [Star]
		go_expr_ptr( ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [PP: `++ expr_ptr]
	{
		send Output [PP]
		go_expr_ptr( ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [MM: `-- expr_ptr]
	{
		send Output [MM]
		go_expr_ptr( ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [expr_ptr PP: `++]
	{
		go_expr_ptr( ExprPtr._expr_ptr )
		send Output [PP]
	}
	elsif match ExprPtr [expr_ptr MM: `--]
	{
		go_expr_ptr( ExprPtr._expr_ptr )
		send Output [MM]
	}
	elsif match ExprPtr ['(' Type: type ')' expr_ptr]
	{
		go_type( Type )
		send Output ['(']
		go_expr_ptr( ExprPtr._expr_ptr )
		send Output [')']
	}
	elsif match ExprPtr [expr_factor]
	{
		go_expr_factor( ExprPtr.expr_factor )
	}
	else {
		send Output [ExprPtr]
	}
}

void go_expr_factor_op( ExprFactorOp: expr_factor_op )
{
	if match ExprFactorOp [B: `! expr_factor_op]
	{
		send Output [B]
		go_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [T: `~ expr_factor_op]
	{
		send Output ['^']
		go_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [expr_ptr]
	{
		go_expr_ptr( ExprFactorOp.expr_ptr )
	}
}

void go_expr_bitwise( ExprBitwise: expr_bitwise )
{
	if match ExprBitwise [expr_bitwise A: `& expr_factor_op]
	{
		go_expr_bitwise( ExprBitwise._expr_bitwise )
		send Output [A]
		go_expr_factor_op( ExprBitwise.expr_factor_op )
	}
	elsif match ExprBitwise [expr_factor_op]
	{
		go_expr_factor_op( ExprBitwise.expr_factor_op )
	}
}

void go_expr_mult( ExprMult: expr_mult )
{
	if match ExprMult [expr_mult T: `* expr_bitwise]
	{
		go_expr_mult( ExprMult._expr_mult )
		send Output [T]
		go_expr_bitwise( ExprMult.expr_bitwise )
	}
	elsif match ExprMult [expr_bitwise]
	{
		go_expr_bitwise( ExprMult.expr_bitwise )
	}
}

void go_expr_add( ExprAdd: expr_add )
{
	if match ExprAdd [expr_add Op: add_op expr_mult]
	{
		go_expr_add( ExprAdd._expr_add )
		send Output [Op]
		go_expr_mult( ExprAdd.expr_mult )
	}
	elsif match ExprAdd [expr_mult]
	{
		go_expr_mult( ExprAdd.expr_mult )
	}
}

void go_expr_shift( ExprShift: expr_shift )
{
	if match ExprShift [expr_shift Op: shift_op expr_add]
	{
		go_expr_shift( ExprShift._expr_shift )
		send Output [Op]
		go_expr_add( ExprShift.expr_add )
	}
	elsif match ExprShift [expr_add]
	{
		go_expr_add( ExprShift.expr_add )
	}
}

void go_expr_test( ExprTest: expr_test )
{
	if match ExprTest [expr_test Op: test_op expr_shift]
	{
		go_expr_test( ExprTest._expr_test )
		send Output [Op]
		go_expr_shift( ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_shift]
	{
		go_expr_shift( ExprTest.expr_shift )
	}
}

void go_expr_cond( ExprCond: expr_cond )
{
	go_expr_test( ExprCond.expr_test )
}

void go_expr_assign( ExprAssign: expr_assign )
{
	if match ExprAssign [expr_assign Op: assign_op expr_cond]
	{
		go_expr_assign( ExprAssign._expr_assign )
		send Output [Op]
		go_expr_cond( ExprAssign.expr_cond )
	}
	elsif match ExprAssign [expr_cond]
	{
		go_expr_cond( ExprAssign.expr_cond )
	}
}

void go_expr( Expr: expr )
{
	go_expr_assign( Expr.expr_assign )
}

void go_type( Type: type )
{
	if match Type "s8"
		send Output ['int8 ']
	elsif match Type "s16"
		send Output ['int16 ']
	elsif match Type "s32"
		send Output ['int32 ']
	elsif match Type "s64"
		send Output ['int64 ']
	elsif match Type "s128"
		send Output ['long long ']
	else
		send Output [Type]
}

void go_number( Number: number )
{
	if match Number [`u `( uint `) ]
		send Output [Number.uint]
	else
		send Output [Number]
}

void go_num_list( NumList: num_list )
{
	go_number( NumList.number )
	for CommaNum: comma_num in NumList {
		send Output [', ']
		go_number( CommaNum.number )
	}
}

void go_stmt( Stmt: stmt )
{
	if match Stmt
		['$' string uint '{' TL: host::tok* host::`}$]
	{
		go_tok_list( TL )
		send Output "
	}
	else if match Stmt
		['=' string uint '{' TL: host::tok* host::`}$]
	{
		go_tok_list( TL )
	}
	elsif match Stmt [Array: array] {
		send Output
			"var [Array.ident] \[\] [go_type(Array.type)] = \[\] "
				"[go_type(Array.type)] { [go_num_list(Array.num_list)] }
	}
	elsif match Stmt [Value: value] {
		send Output
			"var [Value.value_pass.ident] "
				"[go_type(Value.value_pass.type)] = [Value.value_pass.number]
	}
	elsif match Stmt [
			'if' O: `( IfExpr: expr C: `) IfStmt: stmt
	] {
		# if-statements with only the if clause can go out as an if.
		send Output
			"if [go_expr(IfExpr)] {
			"	[go_stmt(IfStmt)]
			"}
	}
	elsif match Stmt [
			'if' O: `( IfExpr: expr C: `) IfStmt: stmt
			ElseIfClauseList: else_if_clause* ElseClauseOpt: else_clause?
	] {
		# If the if-statement has more than just an if clause it goes out as a switch.
		send Output 
			"switch {
			"	case [go_expr( IfExpr )]:
			"		[go_stmt( IfStmt )]

		for ElseIfClause: else_if_clause in repeat( ElseIfClauseList ) {
			match ElseIfClause
				['else if (' ElseIfExpr: expr ')' ElseIfStmt: stmt]

			send Output
				"case [go_expr(ElseIfExpr)]:
				"	[go_stmt(ElseIfStmt)]
		}

		if ( match ElseClauseOpt ['else' ElseStmt: stmt] ) {
			send Output
				"default:
				"	[go_stmt(ElseStmt)]
		}
		send Output
			"}
	}
	elsif match Stmt ["while ( TRUE )" WhileStmt: stmt] {
		send Output
			"for {
			"	[go_stmt(WhileStmt)]
			"}
	}
	elsif match Stmt ['while' '(' WhileExpr: expr ')' WhileStmt: stmt] {
		send Output
			"for [go_expr(WhileExpr)] {
			"	[go_stmt(WhileStmt)]
			"}
	}
	elsif match Stmt ['switch' '(' SwitchExpr: expr ')' '{' StmtList: stmt* '}'] {
		send Output
			"switch [go_expr(SwitchExpr)] {
			"	[go_stmt_list(StmtList)]
			"}
	}
	elsif match Stmt [ExprExpr: expr Semi: `;] {
		send Output
			[go_expr(ExprExpr) Semi]
	}
	elsif match Stmt [L: `{ TL: stmt* R: `}] {
		send Output
			[L go_stmt_list(TL) R]
	}
	elsif match Stmt [D: declaration]
	{
		send Output
			"var  [D.ident] [go_type(D.type)]"

		if match D.opt_init ['=' Expr: expr] {
			send Output
				"  = [go_expr(Expr)]"
		}
		send Output ['\n']
	}
	elsif match Stmt [export_stmt]
	{
		send Output
			"#define  [Stmt.export_stmt.ident] [go_number(Stmt.export_stmt.number)]
	}
	elsif match Stmt ['fallthrough' ';']
	{
		send Output
			"fallthrough
	}
	elsif match Stmt [index_stmt]
	{
		send Output
			"var  [Stmt.index_stmt.ident] int
	}
	else {
		# catches unspecified cases
		send Output [Stmt]
	}
}

void go_stmt_list( StmtList: stmt* )
{
	for Stmt: stmt in repeat( StmtList )
		go_stmt( Stmt )
}
